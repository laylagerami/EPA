write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}
compound_names = compound_names[0:10] # test
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
enrich <- tryCatch({
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}, error = function(e) e)
if(inherits(enrich,"error")){
file.create(paste0(i,"_ERROR.csv"))
}
}
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
enrich <- tryCatch({
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}, error = function(e) e)
if(inherits(enrich,"error")){
file.create(paste0(i,"_ERROR.csv"))
}
}
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}
stopCluster(myCluster)
myCluster <- makeCluster(2, type="FORK",outfile="")
registerDoParallel(myCluster)
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}
stopCluster(myCluster)
# Script to prepare DoRoTHea TF activities
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds)
# Output: 1. .txt file for each signature found in the input matrix
#         2. Folder for each compound (compoundname_measurements)
#         with TF activities (meas_50.txt) as UniProt ID
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# Initialise cluster
n = 2 # change to number of cores needed
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for dorothea
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
map<-read.csv("dorothea_TF_mapping.csv")
#Open matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # Change into df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
#Now change gene ids to gene symbols using metadata
gene_info = fread('gene_info.csv',header=TRUE) # Import metadata
gene_info = as.data.frame(gene_info) # Read as df
converted = merge(test_df,gene_info,by.x='Compound_id',by.y='pr_gene_id') # Map to gene symbol
converted_symbols = converted$pr_gene_symbol # Extract symbols
test_df$Compound_id = converted_symbols # Make row names into symbols
compound_names = compound_names[0:10] # test e.g. 10 compounds
# Run
output <-
foreach(i = compound_names) %dopar% { # Loop over every compound
print(i)
fname = paste0(i,".txt") # Set the file name for the signature file
compound_sig = cbind(test_df[1],test_df[i]) # Take the gene names and corresponding measurements
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T) # Write
df = read.table(fname,sep="\t",header=T,row.names=1) # Read in the signature .txt file
TF_genesymbol<-try( # run DoRothEA, confidence levels A, B and C
runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C')),
silent = T
)
if(inherits(TF_genesymbol,"try-error")){ # If there is an error for some reason, skip the compound
next
}
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2) # Map to UniProt
folder = paste0(i,"_measurements/") # Set folder name
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder) # Write TF activities to folder
}
# Stop the cluster
stopCluster(myCluster)
# Script to prepare DoRoTHea TF activities
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds)
# Output: 1. .txt file for each signature found in the input matrix
#         2. Folder for each compound (compoundname_measurements)
#         with TF activities (meas_50.txt) as UniProt ID
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# Initialise cluster
n = 2 # change to number of cores needed
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for dorothea
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
map<-read.csv("dorothea_TF_mapping.csv")
#Open matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # Change into df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
#Now change gene ids to gene symbols using metadata
gene_info = fread('gene_info.csv',header=TRUE) # Import metadata
gene_info = as.data.frame(gene_info) # Read as df
converted = merge(test_df,gene_info,by.x='Compound_id',by.y='pr_gene_id') # Map to gene symbol
converted_symbols = converted$pr_gene_symbol # Extract symbols
test_df$Compound_id = converted_symbols # Make row names into symbols
compound_names = compound_names[0:10] # test e.g. 10 compounds
# Run
output <-
foreach(i = compound_names) %dopar% { # Loop over every compound
print(i)
fname = paste0(i,".txt") # Set the file name for the signature file
compound_sig = cbind(test_df[1],test_df[i]) # Take the gene names and corresponding measurements
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T) # Write
df = read.table(fname,sep="\t",header=T,row.names=1) # Read in the signature .txt file
TF_genesymbol<-try( # run DoRothEA, confidence levels A, B and C
runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C')),
silent = T
)
if(inherits(TF_genesymbol,"try-error")){ # If there is an error for some reason, skip the compound
next
}
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2) # Map to UniProt
folder = paste0(i,"_measurements/") # Set folder name
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder) # Write TF activities to folder
}
# Stop the cluster
stopCluster(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
View(weight_matrix)
# Import matrix
gexfile = "HT29_6h_10uM.csv"
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
i = compound_names[[1]]
print(i)
fname <- paste0("/",i, ".txt") # get signature .txt
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df)
df_genenames
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
pathway_scores
#Generate input files
folder = paste0(i,"_measurements/scores_")
scores <- rbind(rownames(pathway_scores),pathway_scores[,1])
scores
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
n = 2
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Create output dir
dir.create(file.path("RESULTS_CARNIVAL"),showWarnings = FALSE)
compound_folders = list.dirs(recursive=FALSE)
compound_dirs
compound_folders
# get ones that have already finished and exclude (checkpointing)
done_folders = list.dirs(path="RESULTS_CARNIVAL",full.names=FALSE,recursive=FALSE)
info = file.info(list.dirs(path="RESULTS_CARNIVAL",recursive=FALSE))
info = info[with(info, order(as.POSIXct(ctime))),]
donecomps = rownames(info)
exclude = tail(donecomps,n=1)
exclude = unlist(strsplit(exclude,"RESULTS_CARNIVAL/"))[2]
done_final = done_folders[!done_folders %in% exclude]
compound_folders
compound = compound_folders[1]
compound
drug = unlist(strsplit(unlist(strsplit(compound,"/"))[2],"_"))[1] # get the compound name
drug
#dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
results_dir = paste0("RESULTS_CARNIVAL/",drug)
results_dir
#results_dir = "RESULTS_CARNIVAL/"
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
tf_activities
dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
# load tf + progeny
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
progeny_pathways
setwd("~/OneDrive - University Of Cambridge/EPA/Initial_Investigation/Scripts")
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/tf_progeny/",full.names = T)
dirs
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/tf_progeny/",full.names = T,recursive = T)
dirs
dirs = dirs[2:]
dirs
dirs = dirs[2:8] # get rid of first dir (root dir)
dirs
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/tf_progeny",full.names = T,recursive = T)
dirs = dirs[2:8] # get rid of first dir (root dir)
dirs
# Iterate over Dirs
for(dir in dirs){
files = list.files(dir)
files
}
files
files = list.files(dir,full.names = T)
files
tf = grepl("meas_",files)
tf
tf = files[grepl("meas_",files)]
tf
# get cond
cond = strsplit(file[1])
# get cond
cond = strsplit(file[1],"/")
# get cond
cond = strsplit("/",file[[1]])
# get cond
cond = strsplit("/",file[1])
# get cond
cond = strsplit("/",files[1])
cond
# get cond
cond = strsplit(files[1],"")
# get cond
cond = strsplit(files[1],"/")
cond
# get cond
cond = strsplit(strsplit(files[1],"/")[[1]][4],"_measurements")
cond
# get cond
cond = strsplit(strsplit(files[1],"/")[[1]][4],"_measurements")[[1]][1]
cond
# Get Network
netfilehepg2 = read.csv("../Network_Data/omnipath_full_formatted_hepg2.csv")
View(netfilehepg2)
netfilefull = read.csv("../Network_Data/omnipath_full_formatted.csv")
load(file = system.file("toy_inputs_ex1.RData",
package="CARNIVAL"))
load(file = system.file("toy_inputs_ex1.RData",
package="CARNIVAL"))
colnames(netfilefull) = c('source','Interaction','target')
colnames(netfilehepg2) = c('source','Interaction','target')
# get Targets
targets = read.csv("../Metadata/spiperone_targets_RH.txt",sep="\t")
View(targets)
# get Targets
targets = read.csv("../Metadata/spiperone_targets_RH.txt",sep="\t")$Targets
targets
# get Targets
targets = read.csv("../Metadata/spiperone_targets_RH.txt",sep="\t")$Target
targets
# get Targets
targets = as.character(read.csv("../Metadata/spiperone_targets_RH.txt",sep="\t")$Target)
targets = unlist(strsplit(targets,", "))
targets
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = netfilefull)
# Script to run CARNIVAL
library(CARNIVAL)
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = netfilefull)
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = netfilefull,CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/")
?runCARNIVAL
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = "../Network_Data/omnipath_full_formatted.csv",CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/")
# extract tf and progeny file
tf = files[grepl("meas_",files)]
progeny = files[grepl("scores_",files)]
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = "../Network_Data/omnipath_full_formatted.csv",CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/")
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,measFile = tf, netFile = "../Network_Data/omnipath_full_formatted.csv",CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/",CARNIVAL_example=NULL)
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,
measFile = tf,
netFile = "../Network_Data/omnipath_full_formatted.csv",
CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/",
CARNIVAL_example=NULL,
inverseCR = F
)
write.csv(netfilefull,"../Network_Data/omnipath_full_carnival.sif",sep="\t",quote = F)
write.table(netfilefull,"../Network_Data/omnipath_full_carnival.sif",sep="\t",quote = F)
write.table(netfilefull,"../Network_Data/omnipath_full_carnival.sif",sep="\t",quote = F,row.names = F)
write.table(netfilehepg2,"../Network_Data/omnipath_hepg2_carnival.sif",sep="\t",quote = F,row.names = F)
nethepg2 = "../Network_Data/omnipath_hepg2_carnival.sif"
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,
measFile = tf,
netFile = netall,
CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/",
CARNIVAL_example=NULL,
inverseCR = F
)
netall = "../Network_Data/omnipath_full_carnival.sif"
nethepg2 = "../Network_Data/omnipath_hepg2_carnival.sif"
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,
measFile = tf,
netFile = netall,
CplexPath = "../../../../IBM/ILOG/CPLEX_Studio129/",
CARNIVAL_example=NULL,
inverseCR = F
)
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,
measFile = tf,
netFile = netall,
CplexPath = "../../../../../../Applications/CPLEX_Studio1210/cplex/bin/x86-64_osx/cplex"
CARNIVAL_example=NULL,
inverseCR = F
)
# run CARNIVAL (Inv and normal with both networks)
r1 = runCARNIVAL(inputFile = progeny,
measFile = tf,
netFile = netall,
CplexPath = "../../../../../../Applications/CPLEX_Studio1210/cplex/bin/x86-64_osx/cplex",
CARNIVAL_example=NULL,
inverseCR = F
)
View(netfilefull)
