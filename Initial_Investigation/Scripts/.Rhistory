# loop over conditions, extract nodes, store them
per_cond_nodes = list()
conditions_etc = list()
for(cond in conditions){
# extract experimental condition
time_dose = strsplit(cond,"/")[[1]][4]
# list output tpes
output_types = list.dirs(path=cond,recursive = F) # i.e. full or constrained network
# loop over output types
for(output in output_types){
# full or constrained net?
network_type = strsplit(output,"/")[[1]][5]
# now list .sif in this dir
files = list.files(path=output,full.names = T,pattern="*.sif")
files = files[!files=="all.sif"]
# now list .txt in this dir
txtfiles = list.files(path=output,full.names = T,pattern="*.anno.txt")
txtfiles = txtfiles[!txtfiles=="node_annotations.txt"]
# concatenate the .sif files
all_files = list() # extract networks
all_main_nodes = list() # extract driver
for(sif in files){
#get the main node from file name
main_node = strsplit(strsplit(sif,"-")[[1]][5],".sif")[[1]][1]
# omit directionality
main_node = gsub(pattern="+",replacement="",main_node,fixed = T)
main_node = gsub(pattern="-",replacement="",main_node,fixed=T)
# read the net if possible
net = try(read.table(sif,sep="\t"))
if(!inherits(net,"try-error")){
all_files[[sif]] = net
}
# add to list of nets and main nodes
all_main_nodes[[sif]] = main_node
}
# do the same with node annotations
all_node_annotations = list()
for(txt in txtfiles){
# read the table
tab = try(read.table(txt,sep="\t",skip = 1))
# add to list of nodes annotations
if(!inherits(tab,"try-error")){
all_node_annotations[[txt]] = tab
}
}
# make df with main nodes
all_main_nodes = unname(all_main_nodes)
main_nodes_df = data.frame(t(data.frame(all_main_nodes)))
main_nodes_df$main = rep(1,nrow(main_nodes_df))
rownames(main_nodes_df) = NULL
# make full network file
all_files = unname(all_files)
all_sif = do.call("rbind",all_files)
# remove duplicate rows from network
deduped.data <- unique(all_sif)
# make full anno
all_files_anno = unname(all_node_annotations)
all_files_anno = do.call("rbind",all_files_anno)
# remove duplicate rows from network
deduped.anno <- unique(all_files_anno)
# save files
fnet = paste0(output,"/all.sif")
fnodes = paste0(output,"/main_nodes.txt")
fstate = paste0(output,"/node_annotations.txt")
write.table(deduped.data,fnet,sep="\t",quote=F,row.names = F)
write.table(deduped.anno,fstate,sep="\t",quote=F,row.names=F)
write.table(main_nodes_df,fnodes,sep="\t",quote=F,row.names=F)
# now save the nodelist to a list
all_nodes_in_net = unique(c(as.character(deduped.data$V1),as.character(deduped.data$V3)))
# create a describing string with time,dose,network type
data_desc = paste0(time_dose,"_",network_type)
# save
per_cond_nodes[[output]] = all_nodes_in_net
conditions_etc[[output]] = data_desc
}
}
txt
per_cond_nodes
View(conditions_etc)
conditions_etc
conditions_etc = unname(unlist(conditions_etc))
conditions_etc
# analyse causal reasoning results
library(ReactomePA)
# load CausalR
causalr_dir = "../Results/CausalR"
# list the conditions
conditions = list.dirs(path=causalr_dir,recursive = F)
# loop over conditions, extract nodes, store them
per_cond_nodes = list()
conditions_etc = list()
for(cond in conditions){
# extract experimental condition
time_dose = strsplit(cond,"/")[[1]][4]
# list output tpes
output_types = list.dirs(path=cond,recursive = F) # i.e. full or constrained network
# loop over output types
for(output in output_types){
# full or constrained net?
network_type = strsplit(output,"/")[[1]][5]
# now list .sif in this dir
files = list.files(path=output,full.names = T,pattern="*.sif")
files = files[!files=="all.sif"]
# now list .txt in this dir
txtfiles = list.files(path=output,full.names = T,pattern="*.anno.txt")
txtfiles = txtfiles[!txtfiles=="node_annotations.txt"]
txtfiles = txtfiles[!txtfiles=="main_nodes.txt"]
# concatenate the .sif files
all_files = list() # extract networks
all_main_nodes = list() # extract driver
for(sif in files){
#get the main node from file name
main_node = strsplit(strsplit(sif,"-")[[1]][5],".sif")[[1]][1]
# omit directionality
main_node = gsub(pattern="+",replacement="",main_node,fixed = T)
main_node = gsub(pattern="-",replacement="",main_node,fixed=T)
# read the net if possible
net = try(read.table(sif,sep="\t"))
if(!inherits(net,"try-error")){
all_files[[sif]] = net
}
# add to list of nets and main nodes
all_main_nodes[[sif]] = main_node
}
# do the same with node annotations
all_node_annotations = list()
for(txt in txtfiles){
# read the table
tab = try(read.table(txt,sep="\t",skip = 1))
# add to list of nodes annotations
if(!inherits(tab,"try-error")){
all_node_annotations[[txt]] = tab
}
}
# make df with main nodes
all_main_nodes = unname(all_main_nodes)
main_nodes_df = data.frame(t(data.frame(all_main_nodes)))
main_nodes_df$main = rep(1,nrow(main_nodes_df))
rownames(main_nodes_df) = NULL
# make full network file
all_files = unname(all_files)
all_sif = do.call("rbind",all_files)
# remove duplicate rows from network
deduped.data <- unique(all_sif)
# make full anno
all_files_anno = unname(all_node_annotations)
all_files_anno = do.call("rbind",all_files_anno)
# remove duplicate rows from network
deduped.anno <- unique(all_files_anno)
# save files
fnet = paste0(output,"/all.sif")
fnodes = paste0(output,"/main_nodes.txt")
fstate = paste0(output,"/node_annotations.txt")
write.table(deduped.data,fnet,sep="\t",quote=F,row.names = F)
write.table(deduped.anno,fstate,sep="\t",quote=F,row.names=F)
write.table(main_nodes_df,fnodes,sep="\t",quote=F,row.names=F)
# now save the nodelist to a list
all_nodes_in_net = unique(c(as.character(deduped.data$V1),as.character(deduped.data$V3)))
# create a describing string with time,dose,network type
data_desc = paste0(time_dose,"_",network_type)
# save
per_cond_nodes[[output]] = all_nodes_in_net
conditions_etc[[output]] = data_desc
}
}
conditions_etc = unname(unlist(conditions_etc))
conditions_Etc
conditions_etc
per_cond_nodes
names(per_cond_nodes) = conditions_etc
per_cond_nodes
grepl(names(all_full_nodes),"full")
grepl(names(per_cond_nodes),"full")
grepl(names(per_cond_nodes),"full")==TRUE
names(all_full_nodes)
grep(names(per_cond_nodes),"full")==TRUE
names(per_cond_nodes)
grep("full",per_cond_nodes)
grepl("full",per_cond_nodes)
grepl("full",names(per_cond_nodes))
# split into full and constrained for the network analysis
all_full_nodes = per_cond_nodes[grepl("full",names(per_cond_nodes))]
all_full_nodes
all_cons_nodes = per_cond_nodes[grepl("cons",names(per_cond_nodes))]
# get network nodes for full and constrained for enrichment background
full_net = read.table("../Network_Data/omnipath_full_causalr.sif",sep="t")
# get network nodes for full and constrained for enrichment background
full_net = read.table("../Network_Data/omnipath_full_causalr.sif",sep="\t")
View(full_net)
cons_net = read.table("../Network_Data/omnipath_hepg2_causalr.sif",sep="\t")
full_net_nodes =  unique(c(as.character(full_net$V1),as.character(full_net$V3)))
full_net_nodes
cons_net_nodes =  unique(c(as.character(cons_net$V1),as.character(cons_net$V3)))
cons_net_nodes
# perform the clusterprofiler enrichment
library(clusterProfiler)
# first we need to change all gene symbols to entrez IDs
library(org.Hs.eg.db)
convert = function(symbols){
entrez = AnnotationDbi::select(org.Hs.eg.db,
keys = symbols,
columns= c("SYMBOL","ENTREZID"),
keytype="SYMBOL")
return(as.character(entrez$ENTREZID))
}
convert(as.character(full_net_nodes))
full_net_nodes_entrez = convert(full_net_nodes)
cons_net_nodes_entrez = convert(cons_net_nodes)
all_full_nodes_entrez = lapply(all_full_nodes, convert)
all_full_nodes_entrez
# first we need to change all gene symbols to entrez IDs
library(org.Hs.eg.db)
convert = function(symbols){
entrez = AnnotationDbi::select(org.Hs.eg.db,
keys = symbols,
columns= c("SYMBOL","ENTREZID"),
keytype="SYMBOL")
ids = unique(as.character(entrez$ENTREZID))
ids = ids[!is.na(ids)]
return(ids)
}
full_net_nodes_entrez = convert(full_net_nodes)
cons_net_nodes_entrez = convert(cons_net_nodes)
all_full_nodes_entrez = lapply(all_full_nodes, convert)
all_full_nodes_entrez
all_cons_nodes_entrez = lapply(all_cons_nodes, convert)
# do the enrichment
test <- compareCluster(geneCluster = all_full_nodes_entrez, fun = "enrichKEGG",universe=full_net_nodes_entrez)
View(test)
head(as.data.frame(test))
View(head(as.data.frame(test)))
barplot(test)
library(enrichplot)
dotplot(test)
# do the enrichment
test <- compareCluster(geneCluster = all_full_nodes_entrez, fun = "enrichPathway",universe=full_net_nodes_entrez)
dotplot(test)
library(enrichplot)
dotplot(test,showCategory=NULL)
dotplot(test,showCategory=20)
dotplot(test,showCategory=15)
dotplot(test,showCategory=10)
dotplot(test)
test2 <- compareCluster(geneCluster = all_cons_nodes_entrez, fun = "enrichPathway",universe=cons_net_nodes_entrez)
dotplot(test2)
test2 <- compareCluster(geneCluster = all_cons_nodes_entrez, fun = "enrichGO",universe=cons_net_nodes_entrez,
OrgDb         = org.Hs.eg.db,
ont           = "BP")
dotplot(test2)
test2 <- compareCluster(geneCluster = all_cons_nodes_entrez, fun = "enrichPathway",universe=cons_net_nodes_entrez)
dotplot(test2)
?dotplot
p = dotplot(test2)
p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)).
p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p + theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
p + theme(axis.text.x = element_text(angle = 45))
p + theme(axis.text.x = element_text(angle = 45, hjust=0.5))
p + theme(axis.text.x = element_text(angle = 45, hjust=1))
p + theme(axis.text.x = element_text(angle = 45, hjust=1)) + ggtitle("HEPG2 Constrained Network")
ggsave("../Results/CausalR/dotplot_constrained.png")
ggsave("../Results/CausalR/dotplot_constrained.png",width=10,height=5)
ggsave("../Results/CausalR/dotplot_constrained.png",width=10,height=7)
p = dotplot(test)
p + theme(axis.text.x = element_text(angle = 45, hjust=1)) + ggtitle("Full Network")
ggsave("../Results/CausalR/dotplot_full.png",width=10,height=7)
ggsave("../Results/CausalR/dotplot_full.png",width=11,height=7)
p = dotplot(test2)
p + theme(axis.text.x = element_text(angle = 45, hjust=1)) + ggtitle("HEPG2 Constrained Network")
ggsave("../Results/CausalR/dotplot_constrained.png",width=11,height=7)
# separate enrichment, save as .txt file, then plot the interesting ones?
all_nodes_entrez = c(all_full_nodes_entrez,all_cons_nodes_entrez)
# separate enrichment, save as .txt file, then plot the interesting ones?
# full net
for(cond in all_full_nodes_entrez){
}
cond
# separate enrichment, save as .txt file, then plot the interesting ones?
# full net
for(i in (1:length(all_full_nodes_entrez)){
# separate enrichment, save as .txt file, then plot the interesting ones?
# full net
for(i in (1:length(all_full_nodes_entrez))){
condition = i
}
i
condition = names(all_full_nodes_entrez[i])
condition
nodes_entrez = all_full_nodes_entrez[ii]
nodes_entrez = all_full_nodes_entrez[[i]]
nodes_entrez
enrichment = enrichPathway(nodes_entrez,universe=full_net_nodes_entrez)
View(data.frame(enrichment))
fname = paste0("../Results/CausalR/per_condition_pathways",condition,".txt")
fname
fname = paste0("../Results/CausalR/per_condition_pathways/",condition,".txt")
fname
write.table(tab,fname)
tab = data.frame(enrichment)
fname = paste0("../Results/CausalR/per_condition_pathways/",condition,".txt")
write.table(tab,fname)
write.table(tab,fname,sep="\t")
write.table(tab,fname,sep="\t",quote=F)
write.table(tab,fname,sep="\t",quote=F,row.names=F)
# do plots
p = barplot(enrichment)
p
# do plots
p = barplot(enrichment,showCategory=20)
# do plots
p = barplot(enrichment,showCategory=20)
p
# do plots
p = dotplot(enrichment,showCategory=20)
p
p3 <- cnetplot(enrichment, node_label="all")
p3
# do plots
# convert to gene symbol
edox <- setReadable(enrichment, 'org.Hs.eg.db', 'ENTREZID')
p = dotplot(edox,showCategory=20)
p
p3 <- cnetplot(edox, node_label="all")
p3
p3 <- emapplot(edox)
p3
emapplot(test)
emapplot(test2)
e = emapplot(test2)
ggsave(e,"../Results/CausalR/emapplot_constrained.png",width=11,height=7)
ggsave("../Results/CausalR/emapplot_constrained.png",e,width=11,height=7)
e = emapplot(test)
ggsave("../Results/CausalR/emapplot_full.png",e,width=11,height=7)
# separate enrichment, save as .txt file, then plot the interesting ones?
# full net
for(i in (1:length(all_full_nodes_entrez))){
# extract condition
condition = names(all_full_nodes_entrez[i])
# get nodes
nodes_entrez = all_full_nodes_entrez[[i]]
# perform enrichment
enrichment = enrichPathway(nodes_entrez,universe=full_net_nodes_entrez)
# turn into table
tab = data.frame(enrichment)
# save pathway table
fname = paste0("../Results/CausalR/per_condition_pathways/",condition,".txt")
write.table(tab,fname,sep="\t",quote=F,row.names=F)
# do plots
# convert to gene symbol
edox <- setReadable(enrichment, 'org.Hs.eg.db', 'ENTREZID')
p = dotplot(edox,showCategory=20)
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_dotplot.png")
ggsave(fname,p,width=11,height=7)
p2 <- cnetplot(edox, node_label="all")
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_cnetplot.png")
ggsave(fname,p2,width=11,height=7)
p3 <- emapplot(edox)
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_emapplot.png")
ggsave(fname,p3,width=11,height=7)
}
#cons net
for(i in (1:length(all_cons_nodes_entrez))){
# extract condition
condition = names(all_cons_nodes_entrez[i])
# get nodes
nodes_entrez = all_cons_nodes_entrez[[i]]
# perform enrichment
enrichment = enrichPathway(nodes_entrez,universe=cons_net_nodes_entrez)
# turn into table
tab = data.frame(enrichment)
# save pathway table
fname = paste0("../Results/CausalR/per_condition_pathways/",condition,".txt")
write.table(tab,fname,sep="\t",quote=F,row.names=F)
# do plots
# convert to gene symbol
edox <- setReadable(enrichment, 'org.Hs.eg.db', 'ENTREZID')
p = dotplot(edox,showCategory=20)
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_dotplot.png")
ggsave(fname,p,width=11,height=7)
p2 <- cnetplot(edox, node_label="all")
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_cnetplot.png")
ggsave(fname,p2,width=11,height=7)
p3 <- emapplot(edox)
fname = paste0("../Results/CausalR/per_condition_plots/",condition,"_emapplot.png")
ggsave(fname,p3,width=11,height=7)
}
# similarity between all networks (networks and pathways)
# concatenate the conditions
all_conds_nodes_entrez = c(all_full_nodes_entrez,all_cons_nodes_entrez)
all_conds_nodes_entrez
# create a function
overlapcoefficient = function(i,j){
oc = intersect(i,j)/min(length(i),length(j))
}
# create a function
overlapcoefficient = function(i,j){
oc = intersect(i,j)/min(length(i),length(j))
return(oc)
}
# do the loop
for(i in all_conds_nodes_entrez){
for(j in all_conds_nodes_entrez){
overlapcoefficient(i,j)
}
}
i
j
oc = intersect(i,j)/min(length(i),length(j))
length(i)
length(j)
min(length(i),length(j))
intersect(i,j)
# create a function
overlapcoefficient = function(i,j){
oc = length(intersect(i,j))/min(length(i),length(j))
return(oc)
}
overlapcoefficient(i,j)
nodesi = all_conds_nodes_entrez[[i]]
nodesj = all_conds_nodes_entrez[[j]]
# do the loop
for(i in (1:length(all_conds_nodes_entrez))){
for(j in (1:length(all_conds_nodes_entrez))){
condi = names(all_conds_nodes_entrez[i])
condj = names(all_conds_nodes_entrez[j])
nodesi = all_conds_nodes_entrez[[i]]
nodesj = all_conds_nodes_entrez[[j]]
oc = overlapcoefficient(i=nodesi,j=nodesj)
}
}
oc
row = c(condi,conj,oc)
row = data.frame(c(condi,condj,oc))
row
row = data.frame(t(data.frame(c(condi,condj,oc))))
row
# do the loop
rows = list()
for(i in (1:length(all_conds_nodes_entrez))){
for(j in (1:length(all_conds_nodes_entrez))){
condi = names(all_conds_nodes_entrez[i])
condj = names(all_conds_nodes_entrez[j])
nodesi = all_conds_nodes_entrez[[i]]
nodesj = all_conds_nodes_entrez[[j]]
oc = overlapcoefficient(i=nodesi,j=nodesj)
row = data.frame(t(data.frame(c(condi,condj,oc))))
rows=c(rows,row)
}
}
rows
row
# do the loop
rows = c()
for(i in (1:length(all_conds_nodes_entrez))){
for(j in (1:length(all_conds_nodes_entrez))){
condi = names(all_conds_nodes_entrez[i])
condj = names(all_conds_nodes_entrez[j])
nodesi = all_conds_nodes_entrez[[i]]
nodesj = all_conds_nodes_entrez[[j]]
oc = overlapcoefficient(i=nodesi,j=nodesj)
row = data.frame(t(data.frame(c(condi,condj,oc))))
rows=c(rows,row)
}
}
rows
View(rows)
# do the loop
rows = data.frame()
for(i in (1:length(all_conds_nodes_entrez))){
for(j in (1:length(all_conds_nodes_entrez))){
condi = names(all_conds_nodes_entrez[i])
condj = names(all_conds_nodes_entrez[j])
nodesi = all_conds_nodes_entrez[[i]]
nodesj = all_conds_nodes_entrez[[j]]
oc = overlapcoefficient(i=nodesi,j=nodesj)
row = data.frame(t(data.frame(c(condi,condj,oc))))
rows = rbind(rows,row)
}
}
rows
View(rows)
colnames(rows)= c("cond_1","cond_2","OC")
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC))
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()
rows$OC = as.numeric(as.character(rows$OC))
colnames(rows)= c("cond_1","cond_2","OC")
rows$OC = as.numeric(as.character(rows$OC))
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text()
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text(label=OC)
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text(data=rows,label=OC)
rows$OC = as.numeric(as.character(rows$OC))
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text(aes(label=OC))
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text(aes(label=round(OC,2)))
ggplot(rows,aes(x=cond_1,y=cond_2,fill=OC)) +
geom_tile()+
geom_text(aes(label=round(OC,2)))+
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggsave("../Results/CausalR/network_overlap_coefficient.png")
ggsave("../Results/CausalR/network_overlap_coefficient.png",width=8,height=6)
